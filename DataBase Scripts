create database EmployeeManagementDB
-- Step 2: Use the created database
USE EmployeeManagementDB;

-- Step 3: Create the UserRole Table
CREATE TABLE UserRole (
    RoleID INT PRIMARY KEY,  -- Primary key for RoleID, ensuring uniqueness
    RoleName VARCHAR(50) CHECK (RoleName IN ('Admin', 'Employee'))  -- Enforcing RoleName to be either Admin or Employee
);

-- Step 4: Create the Employee Table
CREATE TABLE Employee (
    UserID INT IDENTITY(1,1) PRIMARY KEY,  -- Primary key for UserID, ensuring uniqueness
    FirstName VARCHAR(100) NOT NULL,  -- First name of the employee
    LastName VARCHAR(100) NOT NULL,   -- Last name of the employee
    Email VARCHAR(100) UNIQUE NOT NULL,  -- Email must be unique and cannot be NULL
    Password VARCHAR(100) NOT NULL,  -- Password must not be NULL
    BirthDate DATE NOT NULL,  -- Birthdate must not be NULL
    HireDate DATE NOT NULL  -- Hire date must not be NULL
);

-- Step 5: Create the TimeOffRequest Table
CREATE TABLE TimeOffRequest (
    RequestID INT IDENTITY(1,1) PRIMARY KEY,  -- Primary key for RequestID, ensuring uniqueness
    EmployeeID INT,  -- Foreign key referencing Employee table
    RequestType VARCHAR(50) NOT NULL,  -- Type of request (e.g., Sick Leave, Vacation)
    StartDate DATE NOT NULL,  -- Start date of the time off request
    EndDate DATE NOT NULL,  -- End date of the time off request
    Status VARCHAR(50) CHECK (Status IN ('Approved', 'Pending', 'Denied')),  -- Only Approved, Pending, or Denied are valid
    Comment TEXT,  -- Optional comments for the time-off request
    ApproverID INT,  -- Foreign key referencing the Employee table (who approves the request)
    FOREIGN KEY (EmployeeID) REFERENCES Employee(UserID),  -- Ensuring EmployeeID refers to a valid employee
    FOREIGN KEY (ApproverID) REFERENCES Employee(UserID)  -- Ensuring ApproverID refers to a valid employee
);

-- Step 6: Create the Availability Table
CREATE TABLE Availability (
    AvailabilityID INT PRIMARY KEY,  -- Primary key for AvailabilityID, ensuring uniqueness
    EmployeeID INT,  -- Foreign key referencing Employee table
    StartDate DATE NOT NULL,  -- Start date for availability
    EndDate DATE NOT NULL,  -- End date for availability
    AvailabilityStatus VARCHAR(50) CHECK (AvailabilityStatus IN ('Available', 'Unavailable')),  -- Only Available or Unavailable
    FOREIGN KEY (EmployeeID) REFERENCES Employee(UserID)  -- Ensuring EmployeeID refers to a valid employee
);

-- Step 7: Create the Attendance Table
CREATE TABLE Attendance (
    ShiftID INT IDENTITY(1,1) PRIMARY KEY,  -- Primary key for ShiftID, ensuring uniqueness
    EmployeeID INT,  -- Foreign key referencing Employee table
    InTime DATETIME NOT NULL,  -- In time of the employee
    OutTime DATETIME NOT NULL,  -- Out time of the employee
    FOREIGN KEY (EmployeeID) REFERENCES Employee(UserID)  -- Ensuring EmployeeID refers to a valid employee
);

-- Step 8: Create the Admin Table
CREATE TABLE Admin (
    PermissionID INT PRIMARY KEY,  -- Primary key for PermissionID, ensuring uniqueness
    RoleID INT,  -- Foreign key referencing UserRole table
    PermissionName VARCHAR(100) NOT NULL,  -- Name of the permission (e.g., "Manage Employees", "Manage TOR")
    FOREIGN KEY (RoleID) REFERENCES UserRole(RoleID)  -- Ensuring RoleID refers to a valid role
);

-- Step 9: Insert Roles into UserRole Table

ALTER TABLE Employee
ADD RoleID INT;


INSERT INTO UserRole (RoleID, RoleName)
VALUES
(1, 'Admin'),
(2, 'Employee');

ALTER TABLE Employee
ADD CONSTRAINT FK_Employee_Role FOREIGN KEY (RoleID) REFERENCES UserRole(RoleID);


CREATE SEQUENCE AvailabilityIdSequence
START WITH 1
INCREMENT BY 1;


